软件可靠性工程的根本目的是设计可靠的软件。软件可靠性设计通过采用相应的技术和工具来减少错误的发生,从而尽量避免错误(即避错)。避错设计是软件可靠性设计的基本方法,但只能达到一定的限度。要想进一步提高可靠性,只有采用容错技术。当然,按软件工程原理进行软件开发是保证软件可靠性的基本方法。

1.软件可靠性分配

软件可靠性分配是将需求分析中形成的可靠性指标分配到各个软件部件,是软件可靠性工程设计的基础,是在充分考虑软件及其开发过程的特征并继承和发展可靠性工程已有成果的基础上发展起来的。目前,主要有快速分配法,以及基于重要度、运行时间和复杂度分配等方法,而后者是普遍使用的方法。

脱离实际、孤立地对软件可靠性进行分配毫无意义,因为不同的软件在功能、性能、规模和结构等方面均存在很大差异。就每个具体的软件而言,是否需要进行可靠性分配、如何分配,必须对实施该软件的过程、环境和条件等加以分析,并应遵循确保重点、难度均等、留有余地、逐步完善的分配原则。

2.重用设计

60年代的软件危机导致了软件重用设计的产生和发展。软件重用即所谓"软件总线技术",是在软件设计过程中对现有成果进行充分再利用的活动,是提高软件生产率、降低开发成本和提高软件可靠性的最有效途径之一。特别在面向对象程序设计方法获得广泛应用后,软件重用日益受到人们的重视,并逐渐成为可靠软件设计的重要方法。软件的重用途径包括合成技术和生成技术。合成技术是利用组装方式来重用软件构件对已有构件仅做少量修改或不做修改,然后"插装"在一起,构造出新的目标系统。生成技术是由程序生成器获得软件重用,是对模式的重用,由生成器导出模式的专有或定制版本,以实现模 
式重用。合成技术也许更有前途,其关键是组件的接口标准。现在,主要的组件接口标准有OLE/COM、CORBA和OpenDoc。有了这些标准,软件开发人员即可独立地开发或利用组件。从软件重用的层次来看,软件重用包括重用数据、重用设计、重用代码和重用规范说明等。但是,软件重用正面临着通用性与专用性、构件的分类与查找、理解、修改、规模、资金,以及其它潜在的问题。因此,目前的主要工作是寻找能大幅度提高软件可靠性和开发效率、且便于实际操作的方法。

软件重用已在子程序库、报告生成器、编译器等方面取得了可喜的进展,但最系统化、工程化的软件重用活动是基于重用库的软件重用。90年代,软件重用实践有三个趋势:一是软件重用的实践惯例化、用户化;二是将重用技术集成到软件开发过程中,逐步实施软件过程的自动化与形式化;三是将领域分析标准化,开发支持领域分析的方法和工具。重用的实现程度依赖于开发规范的完善,快速原型法的成功在一定程度上有赖于重用思想的实现,以及基于重用思想的系统拆装工具的支持。面向对象的程序设计是重用设计的一种具体方法。它在重用的大框架下,将可重用而又互不相交的客体聚集为不同属性的类,抽取类的最大共性集合构造基类,再分层构造有共性的子类。

目前,软件重用的构件涉及到领域分析、抽象、重用库的组织、可重用构件的分类、检索、定位和理解、接口、组织、环境、重用理论支持等问题,它们的克服与解决将是软件重用的重点和热点。

3.形式化设计

软件复杂性通常掩盖了软件设计中的固有错误,因此,要获得较高的软件故障独立性往往很困难。越来越多的软件专家认为,由于软件太复杂,不能在现实世界中得到有效的测试,最佳的解决办法是采用形式化的程序设计、编程系统及验证方法。使用以数学为基础的描述是解决软件设计的精确性和正确性的最好办法。为了使软件设计的每个阶段都能得到有效的测试和验证,最高一级的技术要求(即软件需求分析)必须采用形式化的分析、说明和表达。形式化方法用严密的数学方程和形式化语言来描述软件的需求。

操作语义、数学语义和公理语义是目前主要的三种形式化方法。操作语义为了描述语句在语言中的影响而使用一种按语言执行的假想机器,它已逐渐被数学语义所取代。数学语义是使一种已知语言的每一短语都与一个适当的数学目标联系起来,从而使语义学形式化。短语即所联系的目标,而目标即为短语的标志。这种方法正逐渐被公理语义所取代。操作语义和数学语义为待定义的语言提供模型,而公理语义以一组公理和推断规则隐式地定义一种程序语言,从而验证程序特性,特别是给定程序的正确性,实现了一种给定的输入/输出关系。

形式化规范对高层次数学抽象上定义的数据目标和在抽象句法上定义的函数等提供依据,只有低层次的"无语句"才用于设计抽象变量和"具体句法"的抽象语句。因此,随着程序设计的逐步细化与深入,我们感到,不能把形式化规范所用的方法与抽象的正确性证明分开。目前,许多形式化规范语言正在得到应用,也有了许多试图用于编程语言的语义学方面的尝试,但还没有一种解决办法得到软件工程界的普遍认可。




软件维护是软件交付后改正缺陷、克服故障、增强功能、改善性能或其它属性,以及为使其适应新环境而对其进行修改或扩充的过程,是软件生命周期的最后一个阶段,是软件可靠性工程的主要内容之一。

软件维护包括纠错性维护、适应性维护、完善性维护和预防性维护。在软件维护过程中,有三种维护过程模型:①快速固定模型:首先将原系统代码更新成新系统代码,然后生成需求规格说明等文件,并进行测试;②交互提高模型:对老系统代码进行测试、分析后,产生新系统的需求规格说明,然后按正向工程产生新的系统文档及代码;③全重用模型:对老系统的设计文档、代码、测试文档等全面进行逆向工程设计,从而得到新的软件系统。

软件维护技术可分为面向维护的技术和维护支持技术。面向维护的技术是在软件开发阶段用来减少错误、提高软件可维护性的技术,涉及软件开发的每个阶段。维护支持技术是在维护阶段用来提高维护效率和质量的技术,包括信息收集、错误分析、维护评价、代码与文档修改、维护确认、维护测试、远距离维护等内容。

软件的可理解性、可测试性和可修改性等是决定软件可维护性的基本因素。软件的可维护性除了与良好的设计、完善的文档、严格的测试相关外,还与软件生命周期中的所有活动密切相关。在软件生命周期的每个阶段,都必须充分考虑软件的可维护性问题,并进行可维护性设计。

由于软件的复杂性等因素所造成的困难,维护工作极大地依赖于维护工具和方法的支持。由于维护人员往往只着眼于需要理解和修改的部分,因此便引出了程序观察问题。解决这一问题最一般的方法是高层图表示,也有些研究着眼于改造源代码的可视性。此外,支持软件维护的超文本技术、基于抽象的高层抽象技术,以及基于数据库查询的辅助维护工具等都代表了软件维护工具的发展方向。软件维护实际上是软件重用的实践,对软件重用方法和技术的深入研究,有利于改善软件维护的现状。

